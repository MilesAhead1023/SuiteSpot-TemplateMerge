name: Merge SuiteSpot into Template
on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure zip & tooling
        run: |
          set -e
          if [ ! -f SuiteSpot_patched_final.zip ]; then
            echo "SuiteSpot_patched_final.zip not found at repo root" >&2
            exit 1
          fi
          sudo apt-get update -y
          sudo apt-get install -y unzip

      - name: Fetch BakkesMod VS template
        run: |
          set -e
          rm -rf template
          git clone https://github.com/Martinii89/BakkesmodPluginTemplate.git template

      - name: Prepare workspace
        run: |
          set -e
          rm -rf SuiteSpot_BakkesTemplateMerged .work
          mkdir -p .work/project SuiteSpot_BakkesTemplateMerged/SuiteSpot
          cp -a template/. SuiteSpot_BakkesTemplateMerged/SuiteSpot/
          unzip -q SuiteSpot_patched_final.zip -d .work/project

      - name: Locate SuiteSpot plugin dir
        id: locate
        run: |
          set -e
          PLUGIN_VCX="$(find .work/project -type f -name 'SuiteSpot.vcxproj' | head -n1 || true)"
          if [ -n "$PLUGIN_VCX" ]; then
            echo "dir=$(dirname "$PLUGIN_VCX")" >> "$GITHUB_OUTPUT"
          else
            CAND="$(find .work/project -type f -name 'SuiteSpot.cpp' | grep -i '/plugin/' | head -n1 || true)"
            if [ -z "$CAND" ]; then
              echo "Could not locate SuiteSpot plugin folder" >&2
              exit 1
            fi
            echo "dir=$(dirname "$CAND")" >> "$GITHUB_OUTPUT"
          fi

      - name: Merge SuiteSpot sources
        env:
          PLUGIN_DIR: ${{ steps.locate.outputs.dir }}
        run: |
          set -e
          MERGED_PROJ="SuiteSpot_BakkesTemplateMerged/SuiteSpot"
          bring="SuiteSpot.cpp SuiteSpot.h SuiteSpotConfig.h SuiteSpotConfig.cpp GuiBase.cpp GuiBase.h logging.h pch.h pch.cpp resource.h SuiteSpot.rc suitespot.set version.h BakkesMod.props"
          for f in $bring; do
            if [ -f "$PLUGIN_DIR/$f" ]; then
              cp -f "$PLUGIN_DIR/$f" "$MERGED_PROJ/$f"
            fi
          done
          if [ -f "$PLUGIN_DIR/MapList.h" ]; then cp -f "$PLUGIN_DIR/MapList.h" "$MERGED_PROJ/MapList.h"; fi
          if [ -f "$PLUGIN_DIR/MapList.cpp" ]; then cp -f "$PLUGIN_DIR/MapList.cpp" "$MERGED_PROJ/MapList.cpp"; fi
          if [ -f "$PLUGIN_DIR/plugins/settings/SuiteSpot.set" ]; then
            mkdir -p "$MERGED_PROJ/plugins/settings"
            cp -f "$PLUGIN_DIR/plugins/settings/SuiteSpot.set" "$MERGED_PROJ/plugins/settings/SuiteSpot.set"
          fi

      - name: Patch Program Files default path
        run: |
          set -e
          python3 - << 'PY'
import re, pathlib
p = pathlib.Path("SuiteSpot_BakkesTemplateMerged/SuiteSpot/SuiteSpot.cpp")
if p.exists():
    s = p.read_text(encoding="utf-8", errors="ignore")
    pat = re.compile(r'inline\s+[A-Za-z_:<>]+\s+epicModsDefault\s*\(\)\s*\{[\s\S]*?\}', re.M)
    rep = (
        'inline fs::path epicModsDefault() {\n'
        '        namespace fs = std::filesystem;\n'
        '        const char* pf = std::getenv("ProgramFiles");\n'
        '        if (pf) {\n'
        '            fs::path p = fs::path(pf) / "Epic Games" / "rocketleague" / "TAGame" / "CookedPCConsole" / "mods";\n'
        '            if (fs::exists(p)) { return p; }\n'
        '        }\n'
        '        const char* pf86 = std::getenv("ProgramFiles(x86)");\n'
        '        if (pf86) {\n'
        '            fs::path p2 = fs::path(pf86) / "Epic Games" / "rocketleague" / "TAGame" / "CookedPCConsole" / "mods";\n'
        '            if (fs::exists(p2)) { return p2; }\n'
        '        }\n'
        '        const char* up = std::getenv("USERPROFILE");\n'
        '        if (up) {\n'
        '            fs::path legacy = fs::path(up) / "Documents" / "My Games" / "Rocket League" / "TAGame" / "CookedPCConsole" / "mods";\n'
        '            if (fs::exists(legacy)) { return legacy; }\n'
        '        }\n'
        '        return {};\n'
        '    }'
    )
    s2, n = pat.subn(rep, s, count=1)
    if n:
        p.write_text(s2, encoding="utf-8")
PY

      - name: Normalize BakkesMod.props
        run: |
          set -e
          python3 - << 'PY'
import re, pathlib
p = pathlib.Path("SuiteSpot_BakkesTemplateMerged/SuiteSpot/BakkesMod.props")
if p.exists():
    t = p.read_text(encoding="utf-8", errors="ignore")
    if "BakkesModPath" not in t:
        t = ('<?xml version="1.0" encoding="utf-8"?>\n'
             '<Project DefaultTargets="ShowBakkesInfo" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">\n'
             '  <ImportGroup Label="PropertySheets" />\n'
             '  <PropertyGroup Label="UserMacros">\n'
             '    <BakkesModPath>$(registry:HKEY_CURRENT_USER\\Software\\BakkesMod\\AppPath@BakkesModPath)</BakkesModPath>\n'
             '  </PropertyGroup>\n'
             '  <ItemDefinitionGroup>\n'
             '    <ClCompile>\n'
             '      <AdditionalIncludeDirectories>$(BakkesModPath)\\bakkesmodsdk\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n'
             '    </ClCompile>\n'
             '    <Link>\n'
             '      <AdditionalLibraryDirectories>$(BakkesModPath)\\bakkesmodsdk\\lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>\n'
             '      <AdditionalDependencies>pluginsdk.lib;%(AdditionalDependencies)</AdditionalDependencies>\n'
             '    </Link>\n'
             '    <PostBuildEvent>\n'
             '      <Command>"$(BakkesModPath)\\bakkesmodsdk\\bakkesmod-patch.exe" "$(TargetPath)"</Command>\n'
             '    </PostBuildEvent>\n'
             '  </ItemDefinitionGroup>\n'
             '  <ItemGroup />\n'
             '  <Target Name="ShowBakkesInfo" BeforeTargets="PrepareForBuild">\n'
             '    <Message Text="Using bakkes found at $(BakkesModPath)" Importance="normal" />\n'
             '  </Target>\n'
             '</Project>\n')
    else:
        t = re.sub(r"bakkesmodsd[kK]\\\\include","bakkesmodsdk\\\\include",t)
        t = re.sub(r"bakkesmodsd[kK]\\\\lib","bakkesmodsdk\\\\lib",t)
        if "bakkesmod-patch.exe" not in t:
            t = t.replace("</ItemDefinitionGroup>",
                          '<PostBuildEvent>\n'
                          '  <Command>"$(BakkesModPath)\\bakkesmodsdk\\bakkesmod-patch.exe" "$(TargetPath)"</Command>\n'
                          '</PostBuildEvent>\n'
                          '  </ItemDefinitionGroup>')
    p.write_text(t, encoding="utf-8")
PY

      - name: Generate .sln / .vcxproj / .filters
        run: |
          set -e
          PROJ="SuiteSpot_BakkesTemplateMerged/SuiteSpot"
          if [ -f "$PROJ/BakkesPluginTemplate.vcxproj" ]; then
            sed -e 's/BakkesPluginTemplate/SuiteSpot/g' "$PROJ/BakkesPluginTemplate.vcxproj" > "$PROJ/SuiteSpot.vcxproj"
            rm -f "$PROJ/BakkesPluginTemplate.vcxproj"
          fi
          if [ -f "$PROJ/BakkesPluginTemplate.sln" ]; then
            sed -e 's/BakkesPluginTemplate/SuiteSpot/g' -e 's/BakkesPluginTemplate.vcxproj/SuiteSpot.vcxproj/g' "$PROJ/BakkesPluginTemplate.sln" > "$PROJ/SuiteSpot.sln"
            rm -f "$PROJ/BakkesPluginTemplate.sln"
          fi
          python3 - << 'PY'
import re, pathlib
proj = pathlib.Path("SuiteSpot_BakkesTemplateMerged/SuiteSpot")
vcx  = proj/"SuiteSpot.vcxproj"
if vcx.exists():
    cpps = sorted([str(p.relative_to(proj)).replace("\\","/") for p in proj.rglob("*.cpp")])
    hs   = sorted([str(p.relative_to(proj)).replace("\\","/") for p in proj.rglob("*.h")])
    rcs  = sorted([str(p.relative_to(proj)).replace("\\","/") for p in proj.rglob("*.rc")])
    txt 
